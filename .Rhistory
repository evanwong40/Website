mutate(starwars_new,mass_c=-sd(mass)))
starwars_new1<-starwars_new1%>%
mutate(mass_cat=c(rep("mean",nrow(starwars_new)),
rep("mean+1sd",nrow(starwars_new)),
rep("mean-1sd",nrow(starwars_new))))
prob<-predict(fit6,type="response")
pred<-ifelse(prob>.5,1,0)
ggplot(starwars_new1,aes(y=height_c,x=pred))+
geom_line(aes(color=mass_cat),alpha=.5,size=3)
## Code to get you started on 2d.....characters that a re heavier, height is more associated with being human (opposite for othero
starwars_new1<-bind_rows(mutate(starwars_new,mass_c=0),
mutate(starwars_new,mass_c=sd(mass)),
mutate(starwars_new,mass_c=-sd(mass)))
starwars_new1<-starwars_new1%>%
mutate(mass_cat=c(rep("mean",nrow(starwars_new)),
rep("mean+1sd",nrow(starwars_new)),
rep("mean-1sd",nrow(starwars_new))))
prob<-predict(fit6,type="response")
pred<-ifelse(prob>.5,1,0)
ggplot(starwars_new1,aes(height_c, prob))+
geom_line(aes(color=mass_cat),alpha=.5,size=3)
## Code to get you started on 2d.....characters that a re heavier, height is more associated with being human (opposite for othero
starwars_new1<-bind_rows(mutate(starwars_new,mass_c=0),
mutate(starwars_new,mass_c=sd(mass)),
mutate(starwars_new,mass_c=-sd(mass)))
starwars_new1<-starwars_new1%>%
mutate(mass_cat=c(rep("mean",nrow(starwars_new)),
rep("mean+1sd",nrow(starwars_new)),
rep("mean-1sd",nrow(starwars_new))))
prob<-predict(fit6,type="response")
pred<-ifelse(prob>.5,1,0)
ggplot(starwars_new1,aes(height, prob))+
geom_line(aes(color=mass_cat),alpha=.5,size=3)
## Code to get you started on 2d.....characters that a re heavier, height is more associated with being human (opposite for othero
starwars_new1<-bind_rows(mutate(starwars_new,mass_c=0),
mutate(starwars_new,mass_c=sd(mass)),
mutate(starwars_new,mass_c=-sd(mass)))
starwars_new1<-starwars_new1%>%
mutate(mass_cat=c(rep("mean",nrow(starwars_new)),
rep("mean+1sd",nrow(starwars_new)),
rep("mean-1sd",nrow(starwars_new))))
starwars_new1$prob<-predict(fit6,type="response")
ggplot(starwars_new1,aes(height, prob))+
geom_line(aes(color=mass_cat),alpha=.5,size=3)
## Code to get you started on 2d.....characters that a re heavier, height is more associated with being human (opposite for othero
starwars_new1<-bind_rows(mutate(starwars_new,mass_c=0),
mutate(starwars_new,mass_c=sd(mass)),
mutate(starwars_new,mass_c=-sd(mass)))
starwars_new1<-starwars_new1%>%
mutate(mass_cat=c(rep("mean",nrow(starwars_new)),
rep("mean+1sd",nrow(starwars_new)),
rep("mean-1sd",nrow(starwars_new))))
starwars_new1$prob<-predict(fit6,type="response")
ggplot(starwars_new1,aes(height_c, prob))+
geom_line(aes(color=mass_cat),alpha=.5,size=3)
## Code to get you started on 2d.....characters that a re heavier, height is more associated with being human (opposite for othero
starwars_new1<-bind_rows(mutate(starwars_new,mass_c=0),
mutate(starwars_new,mass_c=sd(mass)),
mutate(starwars_new,mass_c=-sd(mass)))
starwars_new1<-starwars_new1%>%
mutate(mass_cat=c(rep("mean",nrow(starwars_new)),
rep("mean+1sd",nrow(starwars_new)),
rep("mean-1sd",nrow(starwars_new))))
starwars_new1$prob<-predict(fit6, newdata = starwars_new1,type="response")
ggplot(starwars_new1,aes(height_c, prob))+
geom_line(aes(color=mass_cat),alpha=.5,size=3)
## Code to get you started on 2d.....characters that a re heavier, height is more associated with being human (opposite for othero
starwars_new1<-bind_rows(mutate(starwars_new,mass_c=0),
mutate(starwars_new,mass_c=sd(mass)),
mutate(starwars_new,mass_c=-sd(mass)))
starwars_new1<-starwars_new1%>%
mutate(mass_cat=c(rep("mean",nrow(starwars_new)),
rep("mean+1sd",nrow(starwars_new)),
rep("mean-1sd",nrow(starwars_new))))
starwars_new1$probTRASH<-predict(fit6,type="response")
starwars_new1$prob<-predict(fit6, newdata = starwars_new1,type="response")
ggplot(starwars_new1,aes(height_c, prob))+
geom_line(aes(color=mass_cat),alpha=.5,size=3)
install.packages("tidyverse")
library("tidyverse", lib.loc="~/R/win-library/3.6")
#LEAVE THIS CHUNK ALONE!
library(knitr)
opts_chunk$set(fig.align="center", fig.height=5, message=FALSE, warning=FALSE, fig.width=8, tidy.opts=list(width.cutoff=60),tidy=TRUE)
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
library(glmnet)
install.packages("glmnet")
library(glmnet)
install.packages("randomForest")
class_diag(df$value,ifelse(df$variable=="malig",1,0))
#LEAVE THIS CHUNK ALONE!
library(knitr)
opts_chunk$set(fig.align="center", fig.height=5, message=FALSE, warning=FALSE, fig.width=8, tidy.opts=list(width.cutoff=60),tidy=TRUE)
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
library(tidyverse)
poke<-read.csv("https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv",row.names = "Name")
poke<-poke%>%dplyr::select(-`X.`,-Total)
poke%>%count(Legendary=="True")
fit<-glm(Legendary~(.),data=poke,family="binomial");summary(fit)
poke$prob<-predict(fit,type = "response")
class_diag(poke$prob,poke$Legendary)
#Making a confusion matrix
table(predict=as.numeric(poke$prob>.5),truth=poke$Legendary)%>%addmargins
#accuracy
(724+48)/800
#sensitivity
48/65
#specificity
724/735
set.seed(1234)
k=10
poke<-poke%>%dplyr::select(-prob) #remove prob column before running the test
data1<-poke[sample(nrow(poke)),] #randomly order rows
folds<-cut(seq(1:nrow(poke)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
## Train model on training set
fit<-glm(Legendary~(.),data=train,family="binomial")
probs<-predict(fit,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
# your code here
library(glmnet)
y<-as.matrix(poke$Legendary)
x<-model.matrix(Legendary~(.),data=poke)[,-1]
cv<-cv.glmnet(x,y,family="binomial")
lasso<-glmnet(x,y,family="binomial",lambda=cv$lambda.1se)
coef(lasso)
poke$psy<-ifelse(poke$Type.1=="Psychic",1,0)
poke$fly<-ifelse(poke$Type.1=="Flying",1,0)
poke1<-poke%>%dplyr::select(-Type.1,-Type.2,HP,Attack,Defense,Sp..Atk,Sp..Def,Speed,Generation,Legendary,psy,fly)
fit1<-glm(Legendary~(.),data=poke1,family="binomial")
prob<-predict(fit1,data=poke1,type="response")
class_diag(prob,poke1$Legendary)
#confusion matrix
table(predict=as.numeric(prob>.5),truth=poke1$Legendary)%>%addmargins
#accuracy
(722+38)/800
#sensitivity
38/65
#specificity
(722)/735
set.seed(1234)
k=10
poke$psy<-ifelse(poke$Type.1=="Psychic",1,0)
poke$fly<-ifelse(poke$Type.1=="Flying",1,0)
poke1<-poke%>%dplyr::select(-Type.1,-Type.2,HP,Attack,Defense,Sp..Atk,Sp..Def,Speed,Generation,Legendary,psy,fly)
data1<-poke1[sample(nrow(poke1)),] #randomly order rows
folds<-cut(seq(1:nrow(poke1)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
## Train model on training set
fit<-glm(Legendary~(.),data=train,family="binomial")
probs<-predict(fit,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
# your code here
library(randomForest)
fit_rf=randomForest(Legendary~.,data=poke)
class_diag(fit_rf$votes[,2],poke$Legendary)
######### CV
set.seed(1234)
k=10
data1<-poke[sample(nrow(poke)),]
folds<-cut(seq(1:nrow(poke)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
fit<-randomForest(Legendary~.,data=train)
probs<-predict(fit,newdata = test,type="prob")[,2]
diags<-rbind(diags,class_diag(probs,truth))
}
diags%>%summarize_all(mean)
malig<-c(.49, .36, .57, .53, .61, .66)
benign<-c(.41, .22, .26, .56, .31 ,.39)
grid<-expand.grid(malig,benign)%>%mutate(Var3=Var1-Var2)
grid%>%filter(Var3>0)%>%nrow()
#proportions
31/36
wilcox.test(malig,benign)
library(reshape2)
class_diag(df$value,ifelse(df$variable=="malig",1,0))
install.packages("reshape")
class_diag(df$value,ifelse(df$variable=="malig",1,0))
#LEAVE THIS CHUNK ALONE!
library(knitr)
opts_chunk$set(fig.align="center", fig.height=5, message=FALSE, warning=FALSE, fig.width=8, tidy.opts=list(width.cutoff=60),tidy=TRUE)
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
library(tidyverse)
poke<-read.csv("https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv",row.names = "Name")
poke<-poke%>%dplyr::select(-`X.`,-Total)
poke%>%count(Legendary=="True")
fit<-glm(Legendary~(.),data=poke,family="binomial");summary(fit)
poke$prob<-predict(fit,type = "response")
class_diag(poke$prob,poke$Legendary)
#Making a confusion matrix
table(predict=as.numeric(poke$prob>.5),truth=poke$Legendary)%>%addmargins
#accuracy
(724+48)/800
#sensitivity
48/65
#specificity
724/735
set.seed(1234)
k=10
poke<-poke%>%dplyr::select(-prob) #remove prob column before running the test
data1<-poke[sample(nrow(poke)),] #randomly order rows
folds<-cut(seq(1:nrow(poke)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
## Train model on training set
fit<-glm(Legendary~(.),data=train,family="binomial")
probs<-predict(fit,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
# your code here
library(glmnet)
y<-as.matrix(poke$Legendary)
x<-model.matrix(Legendary~(.),data=poke)[,-1]
cv<-cv.glmnet(x,y,family="binomial")
lasso<-glmnet(x,y,family="binomial",lambda=cv$lambda.1se)
coef(lasso)
poke$psy<-ifelse(poke$Type.1=="Psychic",1,0)
poke$fly<-ifelse(poke$Type.1=="Flying",1,0)
poke1<-poke%>%dplyr::select(-Type.1,-Type.2,HP,Attack,Defense,Sp..Atk,Sp..Def,Speed,Generation,Legendary,psy,fly)
fit1<-glm(Legendary~(.),data=poke1,family="binomial")
prob<-predict(fit1,data=poke1,type="response")
class_diag(prob,poke1$Legendary)
#confusion matrix
table(predict=as.numeric(prob>.5),truth=poke1$Legendary)%>%addmargins
#accuracy
(722+38)/800
#sensitivity
38/65
#specificity
(722)/735
set.seed(1234)
k=10
poke$psy<-ifelse(poke$Type.1=="Psychic",1,0)
poke$fly<-ifelse(poke$Type.1=="Flying",1,0)
poke1<-poke%>%dplyr::select(-Type.1,-Type.2,HP,Attack,Defense,Sp..Atk,Sp..Def,Speed,Generation,Legendary,psy,fly)
data1<-poke1[sample(nrow(poke1)),] #randomly order rows
folds<-cut(seq(1:nrow(poke1)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
## Train model on training set
fit<-glm(Legendary~(.),data=train,family="binomial")
probs<-predict(fit,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
# your code here
library(randomForest)
fit_rf=randomForest(Legendary~.,data=poke)
class_diag(fit_rf$votes[,2],poke$Legendary)
######### CV
set.seed(1234)
k=10
data1<-poke[sample(nrow(poke)),]
folds<-cut(seq(1:nrow(poke)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
fit<-randomForest(Legendary~.,data=train)
probs<-predict(fit,newdata = test,type="prob")[,2]
diags<-rbind(diags,class_diag(probs,truth))
}
diags%>%summarize_all(mean)
malig<-c(.49, .36, .57, .53, .61, .66)
benign<-c(.41, .22, .26, .56, .31 ,.39)
grid<-expand.grid(malig,benign)%>%mutate(Var3=Var1-Var2)
grid%>%filter(Var3>0)%>%nrow()
#proportions
31/36
wilcox.test(malig,benign)
library(reshape2)
library(reshape2)
df<-melt(data.frame(malig,benign))
library("reshape2", lib.loc="~/R/win-library/3.6")
library("reshape2", lib.loc="~/R/win-library/3.6")
library("reshape", lib.loc="~/R/win-library/3.6")
install.packages("glmnet")
library("reshape2", lib.loc="~/R/win-library/3.6")
#LEAVE THIS CHUNK ALONE!
library(knitr)
opts_chunk$set(fig.align="center", fig.height=5, message=FALSE, warning=FALSE, fig.width=8, tidy.opts=list(width.cutoff=60),tidy=TRUE)
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
library(tidyverse)
poke<-read.csv("https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv",row.names = "Name")
poke<-poke%>%dplyr::select(-`X.`,-Total)
poke%>%count(Legendary=="True")
fit<-glm(Legendary~(.),data=poke,family="binomial");summary(fit)
poke$prob<-predict(fit,type = "response")
class_diag(poke$prob,poke$Legendary)
#Making a confusion matrix
table(predict=as.numeric(poke$prob>.5),truth=poke$Legendary)%>%addmargins
#accuracy
(724+48)/800
#sensitivity
48/65
#specificity
724/735
set.seed(1234)
k=10
poke<-poke%>%dplyr::select(-prob) #remove prob column before running the test
data1<-poke[sample(nrow(poke)),] #randomly order rows
folds<-cut(seq(1:nrow(poke)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
## Train model on training set
fit<-glm(Legendary~(.),data=train,family="binomial")
probs<-predict(fit,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
# your code here
library(glmnet)
y<-as.matrix(poke$Legendary)
x<-model.matrix(Legendary~(.),data=poke)[,-1]
cv<-cv.glmnet(x,y,family="binomial")
lasso<-glmnet(x,y,family="binomial",lambda=cv$lambda.1se)
coef(lasso)
poke$psy<-ifelse(poke$Type.1=="Psychic",1,0)
poke$fly<-ifelse(poke$Type.1=="Flying",1,0)
poke1<-poke%>%dplyr::select(-Type.1,-Type.2,HP,Attack,Defense,Sp..Atk,Sp..Def,Speed,Generation,Legendary,psy,fly)
fit1<-glm(Legendary~(.),data=poke1,family="binomial")
prob<-predict(fit1,data=poke1,type="response")
class_diag(prob,poke1$Legendary)
#confusion matrix
table(predict=as.numeric(prob>.5),truth=poke1$Legendary)%>%addmargins
#accuracy
(722+38)/800
#sensitivity
38/65
#specificity
(722)/735
set.seed(1234)
k=10
poke$psy<-ifelse(poke$Type.1=="Psychic",1,0)
poke$fly<-ifelse(poke$Type.1=="Flying",1,0)
poke1<-poke%>%dplyr::select(-Type.1,-Type.2,HP,Attack,Defense,Sp..Atk,Sp..Def,Speed,Generation,Legendary,psy,fly)
data1<-poke1[sample(nrow(poke1)),] #randomly order rows
folds<-cut(seq(1:nrow(poke1)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){
## Create training and test sets
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
## Train model on training set
fit<-glm(Legendary~(.),data=train,family="binomial")
probs<-predict(fit,newdata = test,type="response")
## Test model on test set (save all k results)
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #average across all k results
# your code here
library(randomForest)
fit_rf=randomForest(Legendary~.,data=poke)
class_diag(fit_rf$votes[,2],poke$Legendary)
######### CV
set.seed(1234)
k=10
data1<-poke[sample(nrow(poke)),]
folds<-cut(seq(1:nrow(poke)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$Legendary
fit<-randomForest(Legendary~.,data=train)
probs<-predict(fit,newdata = test,type="prob")[,2]
diags<-rbind(diags,class_diag(probs,truth))
}
diags%>%summarize_all(mean)
malig<-c(.49, .36, .57, .53, .61, .66)
benign<-c(.41, .22, .26, .56, .31 ,.39)
grid<-expand.grid(malig,benign)%>%mutate(Var3=Var1-Var2)
grid%>%filter(Var3>0)%>%nrow()
#proportions
31/36
wilcox.test(malig,benign)
library(reshape2)
df<-melt(data.frame(malig,benign))
df%>%ggplot(aes(x=value,fill=variable))+
geom_histogram()
cutoffs<-c(.2, .25, .3, .35, .4, .45, .5, .55, .6, .65, .7)
grid1<-expand.grid(malig,cutoffs)
grid1<-grid1%>%mutate(diff=Var1>Var2)%>%group_by(Var2)%>%summarize(mean(diff))
grid2<-expand.grid(benign,cutoffs)
grid2<-grid2%>%mutate(diff=Var1>Var2)%>%group_by(Var2)%>%summarize(mean(diff))
TPR<-grid1[,-1]
FPR<-grid2[,-1]
df1<-data.frame(TPR=grid1$`mean(diff)`,FPR=grid2$`mean(diff)`)
df1%>%ggplot(aes(x=FPR,y=TPR))+
geom_path()
class_diag(df$value,ifelse(df$variable=="malig",1,0))
blogdown:::serve_site()
setwd("C:/Users/Wongs Family/Desktop/Website")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(reticulate)
string7="ATGGCAATAACCCCCCGTTTCTACTTCTAGAGGAGAAAAGTATTGACATGAGCGCTCCCGGCACAAGGGCCAAAGAAGTCTCCAATTTCTTATTTCCGAATGACATGCGTCTCCTTGCGGGTAAATCACCGACCGCAATTCATAGAAGCCTGGGGGAACAGATAGGTCTAATTAGCTTAAGAGAGTAAATCCTGGGATCATTCAGTAGTAACCATAAACTTACGCTGGGGCTTCTTCGGCGGATTTTTACAGTTACCAACCAGGAGATTTGAAGTAAATCAGTTGAGGATTTAGCCGCGCTATCCGGTAATCTCCAAATTAAAACATACCGTTCCATGAAGGCTAGAATTACTTACCGGCCTTTTCCATGCCTGCGCTATACCCCCCCACTCTCCCGCTTATCCGTCCGAGCGGAGGCAGTGCGATCCTCCGTTAAGATATTCTTACGTGTGACGTAGCTATGTATTTTGCAGAGCTGGCGAACGCGTTGAACACTTCACAGATGGTAGGGATTCGGGTAAAGGGCGTATAATTGGGGACTAACATAGGCGTAGACTACGATGGCGCCAACTCAATCGCAGCTCGAGCGCCCTGAATAACGTACTCATCTCAACTCATTCTCGGCAATCTACCGAGCGACTCGATTATCAACGGCTGTCTAGCAGTTCTAATCTTTTGCCAGCATCGTAATAGCCTCCAAGAGATTGATGATAGCTATCGGCACAGAACTGAGACGGCGCCGATGGATAGCGGACTTTCGGTCAACCACAATTCCCCACGGGACAGGTCCTGCGGTGCGCATCACTCTGAATGTACAAGCAACCCAAGTGGGCCGAGCCTGGACTCAGCTGGTTCCTGCGTGAGCTCGAGACTCGGGATGACAGCTCTTTAAACATAGAGCGGGGGCGTCGAACGGTCGAGAAAGTCATAGTACCTCGGGTACCAACTTACTCAGGTTATTGCTTGAAGCTGTACTATTTTAGGGGGGGAGCGCTGAAGGTCTCTTCTTCTCATGACTGAACTCGCGAGGGTCGTGAAGTCGGTTCCTTCAATGGTTAAAAAACAAAGGCTTACTGTGCGCAGAGGAACGCCCATCTAGCGGCTGGCGTCTTGAATGCTCGGTCCCCTTTGTCATTCCGGATTAATCCATTTCCCTCATTCACGAGCTTGCGAAGTCTACATTGGTATATGAATGCGACCTAGAAGAGGGCGCTTAAAATTGGCAGTGGTTGATGCTCTAAACTCCATTTGGTTTACTCGTGCATCACCGCGATAGGCTGACAAAGGTTTAACATTGAATAGCAAGGCACTTCCGGTCTCAATGAACGGCCGGGAAAGGTACGCGCGCGGTATGGGAGGATCAAGGGGCCAATAGAGAGGCTCCTCTCTCACTCGCTAGGAGGCAAATGTAAAACAATGGTTACTGCATCGATACATAAAACATGTCCATCGGTTGCCCAAAGTGTTAAGTGTCTATCACCCCTAGGGCCGTTTCCCGCATATAAACGCCAGGTTGTATCCGCATTTGATGCTACCGTGGATGAGTCTGCGTCGAGCGCGCCGCACGAATGTTGCAATGTATTGCATGAGTAGGGTTGACTAAGAGCCGTTAGATGCGTCGCTGTACTAATAGTTGTCGACAGACCGTCGAGATTAGAAAATGGTACCAGCATTTTCGGAGGTTCTCTAACTAGTATGGATTGCGGTGTCTTCACTGTGCTGCGGCTACCCATCGCCTGAAATCCAGCTGGTGTCAAGCCATCCCCTCTCCGGGACGCCGCATGTAGTGAAACATATACGTTGCACGGGTTCACCGCGGTCCGTTCTGAGTCGACCAAGGACACAATCGAGCTCCGATCCGTACCCTCGACAAACTTGTACCCGACCCCCGGAGCTTGCCAGCTCCTCGGGTATCATGGAGCCTGTGGTTCATCGCGTCCGATATCAAACTTCGTCATGATAAAGTCCCCCCCTCGGGAGTACCAGAGAAGATGACTACTGAGTTGTGCGAT"
#re.findall(r'A.TAAT|GCAATG|GCGATG|GCATTG|GCGTTG', string7)
# output : ['GCGTTG', 'ATTAAT', 'GCAATG', 'ACTAAT']
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
